name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # tag-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: Validate tag matches Cargo.toml version
  #       shell: bash
  #       run: |
  #         set -euo pipefail
  #         echo "::group::Tag validation"

  #         [[ "${GITHUB_REF_TYPE}" == "tag" ]] \
  #           || { echo "❌ Not a tag push"; exit 1; }
  #         [[ "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta)(\.[0-9]+)?)?$ ]] \
  #           || { echo "❌ Tag '${GITHUB_REF_NAME}' doesn't match expected format"; exit 1; }

  #         tag_ver="${GITHUB_REF_NAME#v}"
  #         cargo_ver="$(grep -m1 '^version' Cargo.toml | sed -E 's/version *= *"([^"]+)".*/\1/')"

  #         [[ "${tag_ver}" == "${cargo_ver}" ]] \
  #           || { echo "❌ Tag ${tag_ver} ≠ Cargo.toml ${cargo_ver}"; exit 1; }

  #         echo "✅ Tag and Cargo.toml agree (${tag_ver})"
  #         echo "::endgroup::"

  build:
    needs: tag-check
    name: ${{ matrix.runner }} - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            target: aarch64-apple-darwin
          - runner: macos-14
            target: x86_64-apple-darwin
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - runner: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v5
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ matrix.runner }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - if: contains(matrix.target, 'musl')
        name: Install musl build tools
        run: sudo apt install -y musl-tools

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Stage artifacts
        shell: bash
        run: |
          dest="dist/${{ matrix.target }}"
          mkdir -p "$dest"
          
          # 替换 aichat 为你的二进制名称
          if [[ "${{ matrix.runner }}" == windows* ]]; then
            cp target/${{ matrix.target }}/release/aichat.exe "$dest/aichat-${{ matrix.target }}.exe"
          else
            cp target/${{ matrix.target }}/release/aichat "$dest/aichat-${{ matrix.target }}"
          fi

      - name: Compress artifacts
        shell: bash
        run: |
          dest="dist/${{ matrix.target }}"
          
          for f in "$dest"/*; do
            base="$(basename "$f")"
            tar -C "$dest" -czf "$dest/${base}.tar.gz" "$base"
            
            if [[ "${{ matrix.runner }}" == windows* ]]; then
              (cd "$dest" && 7z a "${base}.zip" "$base")
            fi
          done

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/${{ matrix.target }}/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Define release name
        id: release_name
        run: |
          version="${GITHUB_REF_NAME#v}"
          echo "name=${version}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release_name.outputs.name }}
          tag_name: ${{ github.ref_name }}
          files: dist/**
          prerelease: ${{ contains(steps.release_name.outputs.name, '-') }}
